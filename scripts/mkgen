#!/usr/bin/env python3

import subprocess, os, sys

KEYS={
	'--compiler': {'help': 'compiler'},
	'--compile-flags': {'help': 'compile flags', 'default': ''},
	'--link-flags': {'help': 'link flags', 'default': ''},
	'--src': {'help': 'src path', 'default': '.'},
	'--out': {'help': 'out path', 'default': 'sss.fa'},
	'--file-extensions': {
		'help': 'colon-separated list of accepted extensions',
		'default': 'c:cpp'},
	'--obj': {'help': 'obj path', 'default': '.'},
	'--src-stdin': {
		'help': 'read list of sources from stdin. Overrides --src and --file-extensions.',
		'default': False
	}
}

def parse_args(args):
	res={}
	for arg in args:
		key_recognized_flag=False
		for k in KEYS:
			if arg.startswith(k+'='):
				key_recognized_flag=True
				if k in res:
					raise Exception('Key redefinition', arg, res[k])
				res[k]=arg[len(k)+1:]
				break
			elif arg==k:
				key_recognized_flag=True
				res[k]=True
		if not key_recognized_flag:
			raise Exception('Key not recognized', arg)
	return res
				
def test_parse_args():
	assert parse_args([])=={}
	assert parse_args(['--out=4'])=={'--out': '4'}
	try:
		parse_args(['--ouX=4'])
		raise Exception('An exception must have been thrown')
	except:
		pass
	assert parse_args(['--out=4', '--compile-flags=234 234 234']) \
		=={'--out': '4', '--compile-flags': '234 234 234'}

def check_args(args):
	for k, v in KEYS.items():
		if k in args:
			continue
		if 'default' not in v:
			raise Exception('Required parameter not set', k)
		args[k]=v['default']

def is_ext_valid(path, xlist):
	for x in xlist.split(':'):
		if path.endswith('.'+x):
			return True
	return False

test_parse_args()

if '--help' in sys.argv[1:]:
	print("A 'one-dir' makefile generator")
	print("Supported keys:")
	for k, v in KEYS.items():
		if 'default' in v:
			print('\t%s=<%s> (default: "%s")' % (k, v['help'], v['default']))
		else:
			print('\t%s=<%s>' % (k, v['help']))
	sys.exit(0)

args=parse_args(sys.argv[1:])
check_args(args)

objs=[]

print("default:", args['--out'])

def get_sources(args):
	if args['--src-stdin']:
		return sys.stdin.read().strip().split('\n')

	return [f for f in os.listdir(args['--src']) \
		if is_ext_valid(f, args['--file-extensions'])]
	
for f in get_sources(args):
	cmd=[
		args['--compiler'],
		'-c', '-M',
		os.path.join(args['--src'], f)]

	if args['--compile-flags']:
		cmd+=(args['--compile-flags'].split(' '))
	try:
		cmd=[x for x in cmd if x]
		out=subprocess.check_output(cmd).decode('utf-8')
	except subprocess.CalledProcessError as x:
		sys.exit(1)
	except OSError as x:
		raise Exception(cmd, x, sys.argv)
	assert out.count(':')==1
	obj, out=out.split(':')
	out=out.replace(' \\\n', ' ').strip()
	deps=out.split(' ')
	print(os.path.join(args['--obj'], obj),':', ' '.join(deps))
	print('\t'+args['--compiler'], args['--compile-flags'], \
		'-c', os.path.join(args['--src'], f), \
		'-o', os.path.join(args['--obj'], obj))
	objs.append(os.path.join(args['--obj'], obj))

print()
print(args['--out'], ':', ' '.join(objs))
print('\t'+args['--compiler'], '-o', \
	args['--out'], ' '.join(objs), args['--link-flags'])

print()
print('clean:')
print('\trm -f', args['--out'], ' '.join(objs))
